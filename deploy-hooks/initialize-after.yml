---
- name: Web root directory exists?
  stat:
    path: "{{ deploy_helper.current_path }}"
  register: deploy_current_path

- name: WordPress Installed (non-multisite)?
  block:
    - name: "Invoke 'wp core is-installed' command"
      command: wp core is-installed --skip-plugins --skip-themes
      args:
        chdir: "{{ deploy_helper.current_path }}"
      register: wp_installed_singlesite
      changed_when: false
      failed_when: wp_installed_singlesite.stderr | length > 0 or wp_installed_singlesite.rc > 1

    - name: Set "WordPress installed?" result variable (from non-multisite)
      set_fact:
        wp_installed: "{{ wp_installed_singlesite }}"
  when:
    - deploy_current_path.stat.exists
    - not project.multisite.enabled | default(false)

- name: WordPress Installed (multisite)?
  block:
    - name: Set variables used in "WordPress Installed (multisite)?" check
      set_fact:
        multisite_non_setup_db_error: "WordPress database error Table '{{ site_env.db_name }}.wp_blogs' doesn't exist"

    - name: "Invoke 'wp core is-installed' command"
      command: wp core is-installed --skip-plugins --skip-themes
      args:
        chdir: "{{ deploy_helper.current_path }}"
      register: wp_installed_multisite
      changed_when: false
      failed_when: (wp_installed_multisite.stderr | length > 0 and wp_installed_multisite.stderr is not match(multisite_non_setup_db_error)) or wp_installed_multisite.rc > 1

    - name: Set "WordPress installed?" result variable (from multisite)
      set_fact:
        wp_installed: "{{ wp_installed_multisite }}"
  when:
    - deploy_current_path.stat.exists
    - project.multisite.enabled | default(false)

- name: Backup WordPress database before new deploy
  command: wp db export
  args:
    chdir: "{{ deploy_helper.current_path }}"
  changed_when: false
  when:
    - deploy_current_path.stat.exists
    - wp_installed.rc == 0