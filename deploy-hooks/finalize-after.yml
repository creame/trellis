---
- name: Install Wordpress
  command: wp core install --url="{{ project.site_hosts | map(attribute='canonical') | first }}" --title={{ site }} --admin_user=admin.creame --admin_email=servicios+{{ site }}@crea.me --skip-email
  args:
    chdir: "{{ deploy_helper.current_path }}"
  when: wp_installed.rc != 0

- block:
  - name: Remove WordPress transient containing old release path
    shell: "{{ project.multisite.enabled | default(false) | ternary('wp network meta delete 1', 'wp option delete') }} _site_transient_theme_roots ||:"
    args:
      chdir: "{{ deploy_helper.current_path }}"
    register: site_transient_theme_roots
    changed_when: site_transient_theme_roots.stdout != ''
    when: project.update_wp_theme_paths | default(update_wp_theme_paths | default(true)) | bool

  - name: Update WP theme paths
    command: >
      wp option set {{ item[0].item }}
      {{ item[1] | regex_replace('.*' + deploy_helper.releases_path + '/[^/]*(.*)', deploy_helper.new_release_path + '\1') }}
      {% if project.multisite.enabled | default(false) %} --url={{ item[1].split(' ')[0] }}{% endif %}
    args:
      chdir: "{{ deploy_helper.current_path }}"
    loop: "{{ wp_template_root.results | subelements('stdout_lines', skip_missing=true) }}"
    loop_control:
      label: "{{ item[0].item }}"
    when: project.update_wp_theme_paths | default(update_wp_theme_paths | default(true)) | bool and item[1] is match(deploy_helper.releases_path)

  - name: Warn about updating network database.
    debug:
      msg: "Updating the network database could take a long time with a large number of sites."
    when: project.update_db_on_deploy | default(update_db_on_deploy) and project.multisite.enabled | default(false)

  - name: Update WP database
    command: wp core update-db {{ project.multisite.enabled | default(false) | ternary('--network', '') }}
    args:
      chdir: "{{ deploy_helper.current_path }}"
    when: project.update_db_on_deploy | default(update_db_on_deploy)

  - name: Update WC database
    command: wp wc update
    args:
      chdir: "{{ deploy_helper.current_path }}"
    when: project.update_db_on_deploy | default(update_db_on_deploy) and project.woocommerce | default(false)

  - name: Update Elementor database
    shell: "wp cli has-command 'elementor update db' && [ $? -eq 0 ] && wp elementor update db || :"
    args:
      chdir: "{{ deploy_helper.current_path }}"
    when: project.update_db_on_deploy | default(update_db_on_deploy)

  - name: Update Elementor Pro database
    shell: "wp cli has-command 'elementor-pro update db' && [ $? -eq 0 ] && wp elementor-pro update db || :"
    args:
      chdir: "{{ deploy_helper.current_path }}"
    when: project.update_db_on_deploy | default(update_db_on_deploy)

  - name: Flush WP rewrite rules
    command: wp rewrite flush --hard
    args:
      chdir: "{{ deploy_helper.current_path }}"

  - name: Remove WP transients
    command: wp transient delete --all
    args:
      chdir: "{{ deploy_helper.current_path }}"

  - name: Flush WP cache
    command: wp cache flush
    args:
      chdir: "{{ deploy_helper.current_path }}"

  - name: Clear Autoptimize cache
    shell: "wp cli has-command 'autoptimize clear' && [ $? -eq 0 ] && wp autoptimize clear --quiet || :"
    args:
      chdir: "{{ deploy_helper.current_path }}"

  - name: Cache Enabler re-activate
    shell: "wp cli has-command 'cache-enabler' && [ $? -eq 0 ] && wp plugin deactivate cache-enabler && wp plugin activate cache-enabler || :"
    args:
      chdir: "{{ deploy_helper.current_path }}"
    when: env == "production"

  - name: Clear Cache Enabler cache
    shell: "wp cli has-command 'cache-enabler clear' && [ $? -eq 0 ] && wp cache-enabler clear --quiet || :"
    args:
      chdir: "{{ deploy_helper.current_path }}"

  when: wp_installed.rc == 0

- name: Reload php-fpm
  shell: sudo service php{{ php_version }}-fpm reload
